"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveConfig = exports.DefaultConfig = exports.Config = void 0;
const typescript_helpers_1 = require("@olian/typescript-helpers");
const messageConstructionStrategy_1 = require("./enums/messageConstructionStrategy");
const dark_1 = require("../themes/dark");
class Config extends typescript_helpers_1.Record {
}
exports.Config = Config;
exports.DefaultConfig = new Config({
    messageConstructionStrategy: messageConstructionStrategy_1.MessageConstructionStrategy.ALL,
    format: (ctx) => `${ctx.time24} ${ctx.type} ${ctx.msg}`,
    saveToFile: null,
    color: dark_1.theme,
    logLevels: {
        debug: 4,
        log: 3,
        info: 2,
        line: 1,
        warn: 1,
        error: 0,
    },
});
// Treats undefined & null in the same way a missing key
const treatAsFalsy = [null, undefined];
const resolveConfig = (config) => new Config({
    messageConstructionStrategy: typescript_helpers_1.useValueOrFallback(config, 'messageConstructionStrategy', exports.DefaultConfig.messageConstructionStrategy, treatAsFalsy),
    format: typescript_helpers_1.useValueOrFallback(config, 'format', exports.DefaultConfig.format, treatAsFalsy),
    saveToFile: typescript_helpers_1.useValueOrFallback(config, 'saveToFile', null, treatAsFalsy),
    color: !config.color
        ? exports.DefaultConfig.color
        : {
            base: typescript_helpers_1.useValueOrFallback(config.color, 'base', exports.DefaultConfig.color.base, treatAsFalsy),
            type: !config.color.type
                ? exports.DefaultConfig.color.type
                : {
                    debug: typescript_helpers_1.useValueOrFallback(config.color.type, 'debug', exports.DefaultConfig.color.type.debug, treatAsFalsy),
                    error: typescript_helpers_1.useValueOrFallback(config.color.type, 'error', exports.DefaultConfig.color.type.error, treatAsFalsy),
                    info: typescript_helpers_1.useValueOrFallback(config.color.type, 'info', exports.DefaultConfig.color.type.info, treatAsFalsy),
                    log: typescript_helpers_1.useValueOrFallback(config.color.type, 'log', exports.DefaultConfig.color.type.log, treatAsFalsy),
                    warn: typescript_helpers_1.useValueOrFallback(config.color.type, 'warn', exports.DefaultConfig.color.type.warn, treatAsFalsy),
                },
        },
    logLevels: !config.logLevels
        ? exports.DefaultConfig.logLevels
        : {
            debug: typescript_helpers_1.useValueOrFallback(config.logLevels, 'debug', exports.DefaultConfig.logLevels.debug, treatAsFalsy),
            error: typescript_helpers_1.useValueOrFallback(config.logLevels, 'error', exports.DefaultConfig.logLevels.error, treatAsFalsy),
            info: typescript_helpers_1.useValueOrFallback(config.logLevels, 'info', exports.DefaultConfig.logLevels.info, treatAsFalsy),
            log: typescript_helpers_1.useValueOrFallback(config.logLevels, 'log', exports.DefaultConfig.logLevels.log, treatAsFalsy),
            warn: typescript_helpers_1.useValueOrFallback(config.logLevels, 'warn', exports.DefaultConfig.logLevels.warn, treatAsFalsy),
            line: typescript_helpers_1.useValueOrFallback(config.logLevels, 'line', exports.DefaultConfig.logLevels.line, treatAsFalsy),
        },
});
exports.resolveConfig = resolveConfig;
